import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;

public class Main {
    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            try {
                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            } catch (Exception e) {
                e.printStackTrace();
            }

            JFrame frame = new JFrame("ホワイトボード");
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frame.setSize(1000, 700);

            CanvasArea canvasArea = new CanvasArea();
            frame.add(canvasArea, BorderLayout.CENTER);

            // コントロールパネルを作成
            JPanel controlPanel = new JPanel();
            controlPanel.setLayout(new FlowLayout(FlowLayout.LEFT, 10, 10));
            frame.add(controlPanel, BorderLayout.NORTH);

            // 描画モード切り替えボタン
            JButton drawButton = createButton("Brush: Small", new Color(173, 216, 230));
            drawButton.addActionListener(e -> {
                if (!canvasArea.isEraserMode()) {
                    canvasArea.togglePenSize();
                    drawButton.setText("Brush: " + canvasArea.getPenSizeLabel());
                } else {
                    canvasArea.setEraserMode(false);
                    System.out.println("Switched to brush mode");
                }
            });
            controlPanel.add(drawButton);

            // 消しゴムモード切り替えボタン
            JButton eraserButton = createButton("Eraser: Small", new Color(240, 128, 128));
            eraserButton.addActionListener(e -> {
                if (canvasArea.isEraserMode()) {
                    canvasArea.toggleEraserWidth();
                    eraserButton.setText("Eraser: " + canvasArea.getEraserSizeLabel());
                } else {
                    canvasArea.setEraserMode(true);
                    System.out.println("Switched to eraser mode");
                }
            });
            controlPanel.add(eraserButton);

            // テキストボックス追加ボタン
            JButton textButton = createButton("Add Text", new Color(255, 228, 196));
            textButton.addActionListener(e -> {
                canvasArea.addTextItem();
                System.out.println("Text box added");
            });
            controlPanel.add(textButton);

            // 色変更ボタン
            JButton colorButton = createButton("Color Change", new Color(144, 238, 144));
            colorButton.addActionListener(e -> {
                Color newColor = JColorChooser.showDialog(frame, "Choose Color", canvasArea.getPenColor());
                if (newColor != null) {
                    canvasArea.setPenColor(newColor);
                    System.out.println("Color changed");
                }
            });
            controlPanel.add(colorButton);

            // 全消去ボタン
            JButton clearButton = createButton("All Delete", new Color(255, 182, 193));
            clearButton.addActionListener(e -> {
                canvasArea.clearCanvas();
                System.out.println("Board cleared");
            });
            controlPanel.add(clearButton);

            frame.setVisible(true);
        });
    }

    // ボタンを作成する共通メソッド
    private static JButton createButton(String text, Color backgroundColor) {
        JButton button = new JButton(text);
        button.setPreferredSize(new Dimension(150, 40));
        button.setBackground(backgroundColor);
        button.setFocusPainted(false);
        button.setBorder(BorderFactory.createLineBorder(Color.DARK_GRAY));
        button.setFont(new Font("MS Gothic", Font.PLAIN, 14));
        return button;
    }
}

class CanvasArea extends JPanel {
    private List<Line> drawnLines = new ArrayList<>();
    private List<JPanel> textItems = new ArrayList<>();
    private Color penColor = Color.BLACK;
    private boolean eraserMode = false;
    private int penSize = 1;
    private int eraserWidth = 10;
    private int lastX, lastY;

    public CanvasArea() {
        setLayout(null); // レイアウトを手動管理
        setBackground(Color.WHITE);

        addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                lastX = e.getX();
                lastY = e.getY();
            }
        });

        addMouseMotionListener(new MouseAdapter() {
            @Override
            public void mouseDragged(MouseEvent e) {
                onMouseMove(e.getX(), e.getY());
            }
        });
    }

    private void onMouseMove(int x, int y) {
        if (eraserMode) {
            drawnLines.add(new Line(lastX, lastY, x, y, Color.WHITE, eraserWidth));
        } else {
            drawnLines.add(new Line(lastX, lastY, x, y, penColor, penSize));
        }
        lastX = x;
        lastY = y;
        repaint();
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        for (Line line : drawnLines) {
            g.setColor(line.color);
            if (line.thickness > 1) {
                Graphics2D g2d = (Graphics2D) g;
                g2d.setStroke(new BasicStroke(line.thickness));
                g2d.drawLine(line.x1, line.y1, line.x2, line.y2);
                g2d.setStroke(new BasicStroke(1));
            } else {
                g.drawLine(line.x1, line.y1, line.x2, line.y2);
            }
        }
    }

    public void setPenColor(Color color) {
        this.penColor = color;
    }

    public Color getPenColor() {
        return this.penColor;
    }

    public boolean isEraserMode() {
        return eraserMode;
    }

    public void setEraserMode(boolean mode) {
        this.eraserMode = mode;
    }

    public void togglePenSize() {
        if (penSize == 1) {
            penSize = 3;
        } else if (penSize == 3) {
            penSize = 5;
        } else {
            penSize = 1;
        }
    }

    public String getPenSizeLabel() {
        return penSize == 1 ? "Small" : penSize == 3 ? "Medium" : "Large";
    }

    public void toggleEraserWidth() {
        if (eraserWidth == 10) {
            eraserWidth = 20;
        } else if (eraserWidth == 20) {
            eraserWidth = 40;
        } else {
            eraserWidth = 10;
        }
    }

    public String getEraserSizeLabel() {
        return eraserWidth == 10 ? "Small" : eraserWidth == 20 ? "Medium" : "Large";
    }

    public void addTextItem() {
        JPanel textItem = new JPanel();
        textItem.setLayout(null);
        textItem.setBounds(50, 50, 200, 50);
        textItem.setBorder(BorderFactory.createLineBorder(Color.GRAY));

        // テキストフィールド
        JTextField textField = new JTextField("Text");
        textField.setBounds(0, 0, 180, 30);

        // 削除ボタン
        JButton closeButton = new JButton("×");
        closeButton.setBounds(180, 0, 20, 20);
        closeButton.addActionListener(e -> {
            remove(textItem);
            textItems.remove(textItem);
            repaint();
            revalidate();
        });

        // ドラッグ＆ドロップ機能を追加
        MouseAdapter dragListener = new MouseAdapter() {
            private Point initialClick;

            @Override
            public void mousePressed(MouseEvent e) {
                initialClick = e.getPoint();
            }

            @Override
            public void mouseDragged(MouseEvent e) {
                if (initialClick != null) {
                    Point location = textItem.getLocation();
                    int x = location.x + e.getX() - initialClick.x;
                    int y = location.y + e.getY() - initialClick.y;
                    textItem.setLocation(x, y);
                }
            }
        };

        textItem.addMouseListener(dragListener);
        textItem.addMouseMotionListener(dragListener);

        textItem.add(textField);
        textItem.add(closeButton);
        textItems.add(textItem);

        add(textItem);
        repaint();
        revalidate();
    }

    public void clearCanvas() {
        drawnLines.clear();
        for (JPanel textItem : textItems) {
            remove(textItem);
        }
        textItems.clear();
        repaint();
    }

    private static class Line {
        int x1, y1, x2, y2;
        Color color;
        int thickness;

        Line(int x1, int y1, int x2, int y2, Color color, int thickness) {
            this.x1 = x1;
            this.y1 = y1;
            this.x2 = x2;
            this.y2 = y2;
            this.color = color;
            this.thickness = thickness;
        }
    }
}
